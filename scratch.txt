Using `new Function('...')` for fast compilation
BUT, how to make it safe and extend standard functionality?
-> Break expression down and then rebuild it into safe string

Expression('y = sum([x, 14 / 3, abs(-27), 5^2])').evaluate({ x: 13 });

=> new Function("state", "fn", "bi", "un", "state['y'] = fn['sum']([state['x'], 14 / 3, fn['abs'](fn[-](27)), 5^2]); return state;");
=> new Function("state", "fn", "bi", "un", "state['y'] = fn['sum']([state['x'], bi['/'](14, 3), fn['abs'](un['-'](27)), bi['^'](5, 2)]); return state;");

`state` has only "static" values and is passed in and out of function
`fn` holds all available functions so only allowed functions can be called
     (e.g. fn['eval'] is not available)
`bi` is for binary operations
`un` is for unary operations

http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm

